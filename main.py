from http.client import responses

import telebot
import requests
import datetime
import os
import locale
from dotenv import  load_dotenv

from telebot import types

load_dotenv()

weekdays = {
    0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥–∞', 3: '–ß–µ—Ç–≤–µ—Ä–≥',
    4: '–ü—è—Ç–Ω–∏—Ü–∞', 5: '–°—É–±–±–æ—Ç–∞', 6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}
months = {
    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤', 3: '–º–∞—Ä', 4: '–∞–ø—Ä', 5: '–º–∞—è', 6: '–∏—é–Ω',
    7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
}

try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    locale.setlocale(locale.LC_TIME, 'Russian')

BOT_API_TOKEN = os.getenv('BOT_API_TOKEN')
WEATHER_API_TOKEN = os.getenv('WEATHER_API_TOKEN')


bot = telebot.TeleBot(BOT_API_TOKEN)

def get_weather(city_name):
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={WEATHER_API_TOKEN}&units=metric&lang=ru'
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        temp = data['main']['temp']
        description = data['weather'][0]['description']
        city = data['name']
        feels_like = data['main']['feels_like']
        wind = data['wind']['speed']
        pressure = data['main']['pressure']
        humidity = data['main']['humidity']

        now = datetime.datetime.now()

        actual_time = now.strftime("%H:%M")

        weather_report = (f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {actual_time}:\n"
                          f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                          f"‚òÅÔ∏è –ù–∞ –Ω–µ–±–µ: {description.capitalize()}\n"
                          f"üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                          f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n"
                          f"‚è≤Ô∏è–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç.—Å—Ç.")
        print(weather_report)
        return weather_report, None
    except requests.exceptions.HTTPError as err:
        if err.response.status_code == 404:
             return None, f"–ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        else:
             return None, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–≥–æ–¥—ã. –ö–æ–¥: {err.response.status_code}"


def get_forecast(city_name):
    url = f'https://api.openweathermap.org/data/2.5/forecast?q={city_name}&appid={WEATHER_API_TOKEN}&units=metric&lang=ru'
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        forecast_report = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {data['city']['name']}:\n"

        forecast_by_day = {}

        forecast_times = ['09:00:00', '12:00:00', '21:00:00']

        for forecast in data['list']:
            date_str = forecast['dt_txt'].split()[0]
            time_str = forecast['dt_txt'].split()[1]

            if time_str in forecast_times:
                if date_str not in forecast_by_day:
                    forecast_by_day[date_str] = []

                temp = round(forecast['main']['temp'])
                description = forecast['weather'][0]['description']

                time_of_day = ""
                if time_str == '09:00:00':
                    time_of_day = "–£—Ç—Ä–æ‚òÄÔ∏è"
                elif time_str == '12:00:00':
                    time_of_day = "–î–µ–Ω—å üèôÔ∏è "
                elif time_str == '21:00:00':
                    time_of_day = "–í–µ—á–µ—Ä üåô"
                if time_of_day:
                    forecast_by_day[date_str].append(f"  - {time_of_day}: {temp}¬∞C, {description.capitalize()}")

        for date, daily_reports in sorted(forecast_by_day.items()):
            date_obj = datetime.datetime.strptime(date, '%Y-%m-%d')
            day_of_week_num = date_obj.weekday()
            day_num = date_obj.day
            month_num = date_obj.month
            formatted_date = f"{weekdays[day_of_week_num]}, {day_num} {months[month_num]}"
            forecast_report += f"\n *{formatted_date}* \n"
            forecast_report += "\n".join(daily_reports)
        return forecast_report , None

    except requests.exceptions.HTTPError as err:
        if err.response.status_code == 404:
             return None, f"–ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        else:
             return None, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–≥–æ–¥—ã. –ö–æ–¥: {err.response.status_code}"

@bot.message_handler(commands = ['start','help'])
def send_welcome(message):
    reply_text = "–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ /weather [–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞] –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É!"
    bot.reply_to(message,reply_text)

@bot.message_handler(commands=['weather'])
def send_weather(message):
    try:
        city_name = message.text.split()[1]
    except IndexError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n(–ù–∞–ø—Ä–∏–º–µ—Ä /weather –õ–æ–Ω–¥–æ–Ω)")
        return

    weather_report, error_message = get_weather(city_name)
    if error_message:
        bot.reply_to(message,error_message)
        return
    markup = types.InlineKeyboardMarkup()
    button_1 = types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å üîÑ", callback_data=f"refresh_{city_name}")
    button_2 = types.InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π üå§Ô∏è",callback_data=f"forecast_{city_name}")
    markup.add(button_1)
    markup.add(button_2)

    bot.send_message(message.chat.id,weather_report, reply_markup = markup,parse_mode='Markdown')

@bot.callback_query_handler(func = lambda call: call.data.startswith('refresh_'))
def handle_refresh(call):
    bot.answer_callback_query(call.id)
    city_name = call.data.split('_')[1]
    new_weather_report, error_message = get_weather(city_name)

    bot.edit_message_text(
        text = new_weather_report,
        chat_id = call.message.chat.id,
        message_id= call.message.message_id,
        reply_markup = call.message.reply_markup,
        parse_mode='Markdown'
    )


@bot.callback_query_handler(func= lambda call: call.data.startswith('forecast_'))
def handle_forecast(call):
    bot.answer_callback_query(call.id)
    city_name = call.data.split('_')[1]
    forecast_report, error_message = get_forecast(city_name)
    if error_message:
        bot.answer_callback_query(call.id, text=error_message, show_alert=True)
        return

    markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{city_name}")
    markup.add(back_button)

    bot.edit_message_text(
        text=forecast_report,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup,
        parse_mode='Markdown'
    )

@bot.callback_query_handler(func= lambda call:call.data.startswith('back_'))
def handle_back(call):
    bot.answer_callback_query(call.id)
    city_name = call.data.split('_')[1]
    new_weather_report, error_message = get_weather(city_name)

    markup = types.InlineKeyboardMarkup()
    button_1 = types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å üîÑ", callback_data=f"refresh_{city_name}")
    button_2 = types.InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π üå§Ô∏è",callback_data=f"forecast_{city_name}")
    markup.add(button_1)
    markup.add(button_2)

    bot.edit_message_text(
        text=new_weather_report,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )

@bot.message_handler(content_types=['text'])
def handle_unknown_text(message):
    reply_text =  (
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É ü§∑‚Äç‚ôÇÔ∏è\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`/weather <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>`"
    )
    bot.reply_to(message, reply_text,parse_mode='Markdown')

bot.infinity_polling()